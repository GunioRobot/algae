global proc string anm_stg_getPythonScriptPath()
{
	return "D:/anemone/module/python";
	//return "/Users/jianzhang/Documents/anemone/module/python";
}

/*
global values
*/

global string $ANM_StrategyPasses[];
global int $ANM_NumStrategyPasses;

/*
choose strategy
*/

global proc anm_chooseStrategy(int $stg)
{
	global string $ANM_StrategyPasses[];
	global int $ANM_NumStrategyPasses;
	
	if($stg==0) {
		$ANM_StrategyPasses[0] = "estimateRadiosity";
		$ANM_StrategyPasses[1] = "approxGlobalDiffuse";
		$ANM_StrategyPasses[2] = "makeGlobalDiffuseBrickMap";
		$ANM_StrategyPasses[3] = "renderFinale";
		$ANM_NumStrategyPasses = 4;
	}
	else if($stg==1) {
		$ANM_StrategyPasses[0] = "estimateRadiosity";
		$ANM_StrategyPasses[1] = "renderFinale";
		$ANM_NumStrategyPasses = 2;
	}
	
	anm_createStrategy;
	anm_initStrategy;
	anm_listStrategyPasses;
}

/*
already exists?
*/

global proc int anm_checkExistingPass(string $name)
{
	 string $render_passes[];
	 $render_passes = `ls -type "delightRenderPass"`;
	 int $i;
	 for($i=0; $i<size($render_passes); $i++) {
	 	 if($render_passes[$i] == $name) return 1;
	 }
	return 0;	
}

/*
create strategy
*/

global proc anm_createStrategy()
{
	global string $ANM_StrategyPasses[];
	global int $ANM_NumStrategyPasses;
	
	int $i;
	for($i=0; $i<$ANM_NumStrategyPasses; $i++) {
		if(`anm_checkExistingPass($ANM_StrategyPasses[$i])` != 1) {
			print("create pass "+$ANM_StrategyPasses[$i]+"\n");
			string $pass = `DL_createRenderPassNode`;
			rename $pass $ANM_StrategyPasses[$i];
		}
	}
}

/*
default values
*/

global proc anm_initStrategy()
{
	global string $ANM_StrategyPasses[];
	global int $ANM_NumStrategyPasses;
	
	int $i;
	for($i=0; $i<$ANM_NumStrategyPasses; $i++) {
		print("initialize pass "+$ANM_StrategyPasses[$i]+"\n");
		setAttr ($ANM_StrategyPasses[$i]+".renderMode") 1;
		setAttr ($ANM_StrategyPasses[$i]+".ribFilename") -type "string" "3delight/<scene>/rib/<pass>.@.<ext>";
		setAttr ($ANM_StrategyPasses[$i]+".connectToRenderGlobals") 0;
		
		string $conn[] =`listConnections -p on -scn on -d off -s on ($ANM_StrategyPasses[$i]+".resolutionX")`;
		if(size($conn)>0) disconnectAttr $conn[0] ($ANM_StrategyPasses[$i]+".resolutionX");
		
		$conn =`listConnections -p on -scn on -d off -s on ($ANM_StrategyPasses[$i]+".resolutionY")`;
		if(size($conn)>0) disconnectAttr $conn[0] ($ANM_StrategyPasses[$i]+".resolutionY");
	}
}

/*
annotate activeness of a pass
*/

global proc anm_activatePass(string $check, string $frame)
{
	string $val = "on";
	if(!`checkBox -q -v $check`) $val = "off";
	frameLayout -e -ann $val $frame;
	print("set "+`frameLayout -q -l $frame`+" "+$val+"\n");
}

/*
connect camera to pass
*/

global proc anm_stg_onChangeCameraOpt(string $opt)
{
	string $cams[] = `ls -type camera`;
	string $pass = `optionMenu -q -ann $opt`;
	int $ucam = `optionMenu -q -sl $opt`;
	string $cam = $cams[$ucam-1];
	if(!`attributeExists "usedBy3dfm" $cam`) addAttr -ln "usedBy3dfm" -dt "string" $cam;
	connectAttr -f ($cam +".usedBy3dfm") ($pass + ".camera");
}

/*
find connected camera
*/

global proc int anm_findPassCamera(string $pass)
{
	string $cams[] = `ls -type camera`;
	string $conn[] =`listConnections -shapes on -scn on -d off -s on ($pass+".camera")`;
	int $i;
	for($i=0; $i<size($cams); $i++) {
		if($cams[$i] == $conn[0]) return $i;
	}
	return 0;
}

/*
append cameras
*/

global proc anm_listCameraAsMenuItems()
{
	string $cams[] = `ls -type camera`;
	string $acam;
	for($acam in $cams) menuItem -l $acam;
}

/*
list strategy passes
*/

global proc anm_listStrategyPasses()
{
// cleanup existing list
	string $pass[] =`columnLayout -q -childArray anm_renderStrategyClm`;
	string $an;
	for($an in $pass) deleteUI $an;
	
	global string $ANM_StrategyPasses[];
	global int $ANM_NumStrategyPasses;
	
	int $i;
	for($i=0; $i<$ANM_NumStrategyPasses; $i++) {
		string $passname = $ANM_StrategyPasses[$i];
		string $frmpass = `frameLayout -p anm_renderStrategyClm 
			-label $passname 
			-collapsable on
			-labelAlign "center"
			-borderStyle "in"
			-width 300
			-ann "on"`;
                columnLayout;
                    string $chkpass = `checkBox -l "Enable" -v 1`; 
                    checkBox -e -cc ("anm_activatePass(\""+$chkpass+"\", \""+$frmpass+"\")") $chkpass;
                    button -l "Select and Open in AE" -c ("select "+$passname+";ShowAttributeEditorOrChannelBox");
                    
                    if($ANM_StrategyPasses[$i] == "estimateRadiosity") {
                    	attrControlGrp -attribute ($passname+".renderPhotonMaps");
			attrControlGrp -attribute ($passname+".numberOfPhotons");
		    }
		    
		    if($ANM_StrategyPasses[$i] != "makeGlobalDiffuseBrickMap") {
		    	    attrControlGrp -attribute ($passname+".shadingRate");
		    	    attrControlGrp -attribute ($passname+".resolutionX");
		    	    attrControlGrp -attribute ($passname+".resolutionY");
		    }
                    
                    string $camopt = `optionMenu -ann $passname -label "Camera"`;

				anm_listCameraAsMenuItems;
			setParent ..;	
				int $usrcam = anm_findPassCamera($passname);
				
				$usrcam++;
				
				optionMenu -e -sl $usrcam $camopt;
				optionMenu -e -cc ("anm_stg_onChangeCameraOpt(\""+$camopt+"\")") $camopt;   
                setParent ..;
	}
}

/*
check activeness of named pass
*/

global proc int anm_checkActivePass(string $name)
{
	string $pass[] =`columnLayout -q -childArray anm_renderStrategyClm`;
	string $an;
	for($an in $pass) {
		if(`frameLayout -q -l $an` == $name) {
			if(`frameLayout -q -ann $an` == "on") {
				print($name+" is active\n");
				return 1;
			}
			else {
				print($name+" is inactive\n");
				return 0;
			}
		}
	}
	return 0;	
}

/*
render
*/

global proc anm_renderStrategy()
{
	// get job path
	string $scn = `file -q -sceneName`;
	if($scn == "") $scn = "untitled.mb";
	string $buffer[];
	$numTokens = `tokenize $scn "/" $buffer`;
	$scn = $buffer[$numTokens-1];
	$numTokens = `tokenize $scn "." $buffer`;
	$scn = $buffer[0];
	string $job_path = `workspace -q -fn`+"/rmantmp/" + $scn +"/";
	
// get rib path
	string $rib_path = `workspace -q -fn`+"/3delight/" + $scn + "/rib/";
	
// open job file
	int $jobfile =`fopen ($job_path+"jobspool.txt") "w"`;
	
	global string $ANM_StrategyPasses[];
	global int $ANM_NumStrategyPasses;
	
	int $i;
	int $frame = `currentTime -q`;
	string $ribfile;
	if(!`checkBox -q -v anm_stg_multiframe`) {
		for($i=0; $i<$ANM_NumStrategyPasses; $i++) {
			if(`anm_checkActivePass($ANM_StrategyPasses[$i])`==1) {
				delightRenderMenuItemCommand $ANM_StrategyPasses[$i];	
				$ribfile = "renderdl " + $rib_path + $ANM_StrategyPasses[$i] +"."+$frame+".rib";
				fprint $jobfile ($ribfile+"\n");
				
				if(`checkBox -q -v anm_stg_depends`) {
					print("check RIB dependency:\n\n");
					string $ribdepents = system("ribdepends " + $rib_path + $ANM_StrategyPasses[$i] +"."+$frame+".rib");
					print($ribdepents+"\n");
				}
			}
		}
	}
	else {
		int $frame_start = `intField -q -v anm_stg_minframe`;
		int $frame_end = `intField -q -v anm_stg_maxframe`;
		
		for($frame = $frame_start; $frame <= $frame_end; $frame++) {
			currentTime $frame;
			for($i=0; $i<$ANM_NumStrategyPasses; $i++) {
				if(`anm_checkActivePass($ANM_StrategyPasses[$i])`==1) {
					delightRenderMenuItemCommand $ANM_StrategyPasses[$i];
					$ribfile = "renderdl " + $rib_path + $ANM_StrategyPasses[$i] +"."+$frame+".rib";
					fprint $jobfile ($ribfile+"\n");
					
					if(`checkBox -q -v anm_stg_depends`) {
						print("check RIB dependency:\n\n");
						string $ribdepents = system("ribdepends " + $rib_path + $ANM_StrategyPasses[$i] +"."+$frame+".rib");
						print($ribdepents+"\n");
					}
				}
			}
		}
	}
// finish
	fclose $jobfile;
	print("starting job from: "+$job_path+"jobspool.txt\n");
	if(`checkBox -q -v anm_stg_immediate`) {
		system("python "+anm_stg_getPythonScriptPath()+"/anemone.py --file "+$job_path+"jobspool.txt");
		print("render finished!\n");
	}
	else 
		print("no render, start job outside maya.");
}

/*
main window
*/

global proc anm_openRenderStrategyWin()
{
//create shader path
	string $shader_path = `workspace -q -fn`+"/rmanshaders/";
	
	system("mkdir \""+$shader_path +"\"");
// create tmp path
	string $tmp_path = `workspace -q -fn`+"/rmantmp/";
	
	system("mkdir \""+$tmp_path +"\"");
	
// get scene name
	string $scnname = `file -q -sceneName`;
	if($scnname == "") $scnname = "untitled";
	else {
		string $buffer[];
		$numTokens = `tokenize $scnname "/" $buffer`;
		$scnname = $buffer[$numTokens-1];
		$numTokens = `tokenize $scnname "." $buffer`;
		$scnname = $buffer[0];
	}

// shader and tmp per scene
	system("mkdir \""+$tmp_path + "/" + $scnname + "\"");
	system("mkdir \""+$shader_path + "/" + $scnname + "\"");
	
//If such a window already exists, destory it.
 if ( (`window -exists anm_renderStrategyWin`) == true ) deleteUI anm_renderStrategyWin;

//Create the window.
 window -title "Anemone 4.3 - Render Strategy" -wh 400 300  -mb on anm_renderStrategyWin;
 
 menu -label "Create Strategy" -tearOff false;
    menuItem -label "Global Illumination Simple" -c "anm_chooseStrategy(1)";
    menuItem -label "Global Illumination" -c "anm_chooseStrategy(0)";
    //menuItem -divider true;
    //menuItem -label "Quit";
menu -label "Help" -helpMenu true;
    menuItem -label "About Anemone" -c anm_openRenderStrategyHelpWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowColumnLayout -numberOfColumns 3 -columnWidth 1 120 -columnWidth 2 120 -columnWidth 3 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollLayout -p $form`;

columnLayout -adjustableColumn true anm_renderStrategyClm;

	
//row begin
checkBox -label "Multi Frame" -p $row anm_stg_multiframe;
intField -v 1 -p $row anm_stg_minframe;
intField -v 24 -p $row anm_stg_maxframe;
checkBox -v 1 -label "Immediate Render" -p $row anm_stg_immediate;text -l "" -p $row;text -l "" -p $row;
checkBox -v 1 -label "Check Dependency" -p $row anm_stg_depends;text -l "" -p $row;text -l "" -p $row;
text -l "" -p $row;text -l "" -p $row;text -l "" -p $row;
button -l "Reload" -c "anm_listStrategyPasses" -p $row;
button -l "Render" -c "anm_renderStrategy" -p $row;
button -l "Close"-c "deleteUI anm_renderStrategyWin" -p $row;

formLayout -edit
        -attachNone     $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow anm_renderStrategyWin;
}

/*
help window
*/

global proc anm_openRenderStrategyHelpWin()
{
//If such a window already exists, destory it.
 if ( (`window -exists anm_renderStrategyHelpWin`) == true ) deleteUI anm_renderStrategyHelpWin;

//Create the window.
 window -title "Anemone 4.3 - Render Strategy Help" -wh 400 300  -mb off anm_renderStrategyHelpWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowLayout -numberOfColumns 3 -columnWidth3 120 120 120 -columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0`;
string $scroll = `scrollField -p $form -wordWrap true -ed off`;

scrollField -e -text "Create Strategy to create render passes for specific purposes. Resulting passes will show up below for more tweak. " $scroll;
scrollField -e -it "Reload to list existing render passes. Render will save RIB from active passes and lauch a render job on them." $scroll;
scrollField -e -it "Mult Frame will trigger render animation from start to end. Immediate Render means proceed rendering within Maya. Won't respond until render is finished. " $scroll;
	
//row begin
button -l "Close"-c "deleteUI anm_renderStrategyHelpWin" -p $row;
text -l " " -p $row;
text -l " " -p $row;

formLayout -edit
        -attachNone     $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $scroll "top"    2
        -attachForm	$scroll "left"   2
        -attachControl	$scroll "bottom" 2 $row
        -attachForm     $scroll "right"  2
    $form;

showWindow anm_renderStrategyHelpWin;
}
