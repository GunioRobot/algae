/*
init set
*/

global proc string anm_getMasterPath()
{
	return "/Users/jianzhang/Documents/anemone/module/xrsl";
}

global proc string[] anm_getSurfaceFiles()
{
	string $res[];
	$res[0] = "foo";
	return $res;
}

global proc string[] anm_getColorFiles()
{
	string $res[];
	$res[0] = "mixColor";
	return $res;
}

/*
global controls
*/

global string $ANM_ShoFilterMenu = "";
global int $ANM_NUMItem = 0;
global int $ANM_CURItem = 0;
global string $ANM_PreservedItems[];

/*
get upstream connections
*/

global proc anm_downstreamConn( string $connected[], string $node)
{
	clear($connected);
	int $i = 0;
	string $outattr = $node + ".output";
	
	string $conn[] =`listConnections -scn on -d on -s off $outattr`;
	
	string $aconn;
	string $nt;
	for($aconn in $conn) {
		$nt = `nodeType $aconn`;
		if($nt != "transform" && $nt != "aCacheMesh") {
			$connected[$i] = $aconn;
			$i++;
		}
	}

	if(`attributeExists "outputC" $node`) {
		$outattr = $node + ".outputC";
		$conn =`listConnections -scn on -d on -s off $outattr`;
	
		for($aconn in $conn) {
			$nt = `nodeType $aconn`;
			if($nt != "transform" && $nt != "aCacheMesh") {
				$connected[$i] = $aconn;
				$i++;
			}
		}
	}
	
	if(`attributeExists "outputS" $node`) {
		$outattr = $node + ".outputS";
		$conn =`listConnections -scn on -d on -s off $outattr`;
	
		for($aconn in $conn) {
			$nt = `nodeType $aconn`;
			if($nt != "transform" && $nt != "aCacheMesh") {
				$connected[$i] = $aconn;
				$i++;
			}
		}
	}
}

/*
go up stream popup
*/
global proc anm_popupGoUpMenu(string $name)
{
	string $conn[];
	anm_downstreamConn($conn, $name);
	string $aconn;
popupMenu;
	for($aconn in $conn) menuItem -l $aconn -c ("anm_updateAttrib(\"" + $aconn + "\")") ;
			
}

/*
check loop back
b-->a-x->b
*/

global proc int anm_checkAnyLoopBack(string $a, string $b)
{
	if($a == $b) return 1;
	string $tb = `nodeType $b`;
// end when read mesh
	if($tb == "aCacheMesh"||$tb == "transform") {
		return 0;
	}	
	string $outattr = $b + ".output";
	
	string $conn[] =`listConnections -scn on -d on -s off $outattr`;
	
	string $aconn;
	int $res = 0;
	for($aconn in $conn) {
		$res = anm_checkAnyLoopBack($a, $aconn);
		if($res == 1) return 1;
	}
	
	if($tb == "aShaderPiece" || $tb == "aShaderVariable" || $tb == "aShaderAdaptVariable") {
		
		$outattr = $b + ".outputC";
		
		$conn =`listConnections -scn on -d on -s off $outattr`;
		
		for($aconn in $conn) {
			$res = anm_checkAnyLoopBack($a, $aconn);
			if($res == 1) return 1;
		}
		
		$outattr = $b + ".outputS";
		
		$conn =`listConnections -scn on -d on -s off $outattr`;
		
		for($aconn in $conn) {
			$res = anm_checkAnyLoopBack($a, $aconn);
			if($res == 1) return 1;
		}
	}

	return 0;
}

/*
string to xyz
*/

global proc string[] anm_splitbyspace(string $name)
{
string $buffer[];
$numTokens = `tokenize $name " " $buffer`;
return $buffer;
}

/*
node name by attrib
*/

global proc string anm_cutByFirstDot(string $name)
{
string $buffer[];
$numTokens = `tokenize $name "." $buffer`;
return $buffer[0];
}

/*
change string attr by text field
*/

global proc anm_connectTextFieldToStringAttr(string $textfield)
{
	string $attr = `textFieldGrp -q -ann $textfield`+"."+`textFieldGrp -q -l $textfield`;
	string $val = `textFieldGrp -q -text $textfield`;
	setAttr -type "string" $attr $val;
}

/*
change string attr by text field button
*/

global proc anm_connectTextFieldButtonToStringAttr(string $textfield)
{
	string $attr = `textFieldButtonGrp -q -ann $textfield`;
	string $val = `textFieldButtonGrp -q -text $textfield`;
	setAttr -type "string" $attr $val;
}

/*
pick a file as string var
*/

global proc anm_pickupFileAsStringAttr(string $textfield)
{
	string $attr = `textFieldButtonGrp -q -ann $textfield`;
	string $val = `fileDialog`;
	setAttr -type "string" $attr $val;
	textFieldButtonGrp -e -text $val $textfield;
}

/*
set to selection
*/

global proc anm_setTextFieldButtonTextBySelection(string $textfield)
{
	pickWalk -d down;
	string $sel[] = `ls -sl`;
	if(size($sel)>0) {
		string $val = $sel[0];
		int $i;
		for($i=1; $i<size($sel); $i++) $val = $val + " " + $sel[$i];
			
		textFieldButtonGrp -e -text $val $textfield;
		
		string $attr = `textFieldButtonGrp -q -ann $textfield`;
		setAttr -type "string" $attr $val;
	}
}

/*
navigate to connected node
*/

global proc anm_aShaderNaviConnected( string $attr )
{
	string $conn[] =`listConnections -scn on $attr`;
	if(size($conn)>0) {
		select -r $conn[0];
		anm_updateAttrib($conn[0]);
	}
}

/*
disconnect attr
*/

global proc anm_disconnectAttrAny( string $field )
{
	string $attr = `textFieldButtonGrp -q -ann $field`;
	string $conn[] =`listConnections -scn on -p on $attr`;
	if(size($conn)>0) {
		disconnectAttr $conn[0] $attr;
		string $dstnode = anm_cutByFirstDot($attr);
		textFieldButtonGrp -e -text "nil" $field;
	}
}

/*
get connected node
*/

global proc string anm_aShaderGetConnected( string $attr )
{
	string $conn[] =`listConnections -scn on $attr`;
	if(size($conn)>0) return $conn[0];
	else return "nil";
}

/*
select and list attrib
*/

global proc anm_shopieceinae(string $name)
{
	string $piece = `rowLayout -q -ann $name`;
	select -r $piece;
	anm_updateAttrib($piece);
}

/*
rename n record
*/

global proc anm_renameAPiece(string $name, string $text)
{
	string $a = `rowLayout -q -ann $name`;
	string $b = `textField -q -text $text`;
	rename $a $b;
	rowLayout -e -ann $b $name;
}

/*
drag a piece
*/

global proc string[] anm_dragcallbackPiece(string $dragControl, int $x, int $y, int $mods)
{
	string $res[];
	$res[0] = `iconTextButton -q -ann $dragControl`;
	return $res;
}

/*
drop to remove
*/

global proc anm_dropcallbackPiece(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
	if(`nodeType $node` == "aShaderAdaptEnsemble") {
		int $num_line = `getAttr ($node+".numCondition")`;
        	int $i;
        	string $conn[];
        	for($i=0; $i<$num_line; $i++) {
        		$conn =`listConnections -scn on ($node+".ensemble["+$i+"]")`;
			if(size($conn)>0) {
				disconnectAttr ($conn[0] + ".output") ($node+".ensemble["+$i+"]");
			}
        	}
        	$conn =`listConnections -scn on -s off -p on ($node+".output")`;
        	string $aconn;
        	for($aconn in $conn) disconnectAttr ($node+".output") $aconn;
	}
	else if(`nodeType $node` == "aShaderEnsemble") {
// disconnect all inflow
		string $conn[] =`listConnections -scn on ($node+".surfaceShader")`;
		if(size($conn)>0) {
			disconnectAttr ($conn[0] + ".output") ($node+".surfaceShader");
		}
		$conn =`listConnections -scn on ($node+".displacementShader")`;
		if(size($conn)>0) {
			disconnectAttr ($conn[0] + ".output") ($node+".displacementShader");
		}
		$conn =`listConnections -scn on -s off -p on ($node+".output")`;
        	string $aconn;
        	for($aconn in $conn) disconnectAttr ($node+".output") $aconn;
	}
	else if(`nodeType $node` == "aShaderPiece" || `nodeType $node` == "aShaderVariable" || `nodeType $node` == "aShaderAdaptVariable") {
		string $conn[] = `listConnections -scn on -p on ($node+".output")`;
		string $aconn;
		for($aconn in $conn ) {
			disconnectAttr ($node + ".output") $aconn;
		}
		$conn = `listConnections -scn on -p on ($node+".outputC")`;
		for($aconn in $conn ) {
			disconnectAttr ($node + ".outputC") $aconn;
		}
		$conn = `listConnections -scn on -p on ($node+".outputS")`;
		for($aconn in $conn ) {
			disconnectAttr ($node + ".outputS") $aconn;
		}
	}
	
	delete $node;
// hide it not delete
	rowLayout -e -vis false $msgs[0];
}

/*
drop to connect peice to ensembel
*/

global proc anm_aShaderConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
	if($dstnode != $node) {
		connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
		textFieldButtonGrp -e -text $node $dropControl;
	}
	else print("self connection is not allowed");
}

/*
drop to connect ensemble to adapt ensemble
*/

global proc anm_adaptEnsembleConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
	if( anm_checkAnyLoopBack($node, $dstnode)  == 1) {
		print("loop back is not allowed\n");
		return;
	}
	//if($dstnode != $node) {
		
		if(`nodeType $node` == "aShaderEnsemble" || `nodeType $node` == "aShaderAdaptEnsemble") {
			connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else print("only ensemble and adaptensemble can be connected");
	//}
	//else print("self connection is not allowed");
}

/*
drop to connect piece or variable or adapt varible to piece attr
*/

global proc anm_pieceConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
	if( anm_checkAnyLoopBack($node, $dstnode)  == 1) {
		print("loop back is not allowed\n");
		return;
	}
		if(`nodeType $node` == "aShaderPiece") {
			string $diagsh[] = `aShaderDiagnose -n $node -t 1`;
			string $handle = $diagsh[0];
			if($handle == "float")
				connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "color" || $handle == "surface")
				connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "string")
				connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else if(`nodeType $node` == "aShaderVariable" || `nodeType $node` == "aShaderAdaptVariable") {
			string $handle = `getAttr ($node+".handle")`;
			if($handle == "float")
				connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "color")
				connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "string")
				connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else print("no ensemble can be connected");
}

/*
drop to connect piece or variable to adapt varible
*/

global proc anm_adaptVaribleConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
	if( anm_checkAnyLoopBack($node, $dstnode)  == 1) {
		print("loop back is not allowed\n");
		return;
	}
	string $operation = `getAttr ($dstnode+".opt")`;
	if($operation == "combine") {
		if(`nodeType $node` == "aShaderPiece") {
			string $diagsh[] = `aShaderDiagnose -n $node -t 1`;
			string $handle = $diagsh[0];
			if($handle == "float")
				connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "color" || $handle == "surface")
				connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "string")
				connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else if(`nodeType $node` == "aShaderVariable" || `nodeType $node` == "aShaderAdaptVariable") {
			string $handle = `getAttr ($node+".handle")`;
			if($handle == "float")
				connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "color")
				connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "string")
				connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else print("no ensemble can be connected");
	}
	else {
		if(`nodeType $node` == "aShaderVariable") {
			string $handle = `getAttr ($node+".handle")`;
			if($handle == "float")
				connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "color")
				connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
			else if($handle == "string")
				connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
		}
		else print("only variable can be connected here");
	}
}

/*
drop to connect piece or variable to attr
*/

global proc anm_aShaderConnectTypedAttrDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
	if($dstnode != $node) {
		string $dstattrname = `textFieldButtonGrp -q -l $dropControl`;
		string $paramsh[];
		if(`nodeType $node` == "aShaderPiece") {
			$paramsh = `aShaderDiagnose -n $node -pt $dstattrname`;
		}
		else if(`nodeType $node` == "aShaderVariable" || `nodeType $node` == "aShaderAdaptVariable") {
			$paramsh[0] = `getAttr ($node+".handle")`;
		}

		if($paramsh[0] == "string") connectAttr -f ($node + ".outputS") `textFieldButtonGrp -q -ann $dropControl`;
		else if($paramsh[0] == "double3" || $paramsh[0] == "color") connectAttr -f ($node + ".outputC") `textFieldButtonGrp -q -ann $dropControl`;
		else connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
		
		textFieldButtonGrp -e -text $node $dropControl;
	}
	else print("self connection is not allowed");
}

/*
attach ensemble to a node
*/

global proc anm_attachEnsemble(string $row)
{
	string $node = `rowLayout -q -ann $row`;
	string $sel[] = `ls -sl`;
	int $i;
	for($i=0; $i<size($sel); $i++) {
		select -r $sel[$i];
		string $shape[] = `pickWalk -d down`;
		if(`nodeType $shape[0]`=="aCacheMesh") {
			if(!`attributeExists "aensembleMsg" $shape[0]`) addAttr -ln "aensembleMsg" -attributeType "float"  $shape[0];
			connectAttr -f ($node + ".output") ($shape[0]+".aensembleMsg");
			print("attached " + $node+ " to "+$shape[0]);
		}
		else print("\nonly mesh cache can be attached");
	}
// restore selection
	for($i=0; $i<size($sel); $i++) {
		if($i==0) select -r $sel[$i];
		else select -tgl $sel[$i];
	}
}

/*
detach ensemble to a node
*/

global proc anm_detachEnsemble(string $row)
{
	string $node = `rowLayout -q -ann $row`;
	string $sel[] = `ls -sl`;
	int $i;
	for($i=0; $i<size($sel); $i++) {
		select -r $sel[$i];
		string $shape[] = `pickWalk -d down`;
		if(`attributeExists "aensembleMsg" $shape[0]`) {
			string $conn[] =`listConnections -scn on ($shape[0]+".aensembleMsg")`;
			if($conn[0] == $node) {
				disconnectAttr ($node + ".output") ($shape[0]+".aensembleMsg");
			}
		}
	}
// restore selection
	for($i=0; $i<size($sel); $i++) {
		if($i==0) select -r $sel[$i];
		else select -tgl $sel[$i];
	}
}

/*
get objects connected to ensemble
*/

global proc anm_affectbyEnsemble(string $row)
{
	string $node = `rowLayout -q -ann $row`;
	string $conn[] =`listConnections -scn on ($node+".output")`;
	string $sel[];
	int $i;

	for($i=0; $i<size($conn); $i++) {
		if($i==0) select -r $conn[$i];
		else select -tgl $conn[$i];
	}
}

/*
get objects connected to piece
*/

global proc anm_affectbyPiece(string $row)
{
	string $node = `rowLayout -q -ann $row`;
	
	string $conn[] =`listConnections -scn on ($node+".output")`;
	string $sel[];
	int $i;

	for($i=0; $i<size($conn); $i++) {
		if($i==0) select -r $conn[$i];
		else select -tgl $conn[$i];
	}
	
	$conn =`listConnections -scn on ($node+".outputC")`;
	for($i=0; $i<size($conn); $i++) {
		select -tgl $conn[$i];
	}
	
	$conn =`listConnections -scn on ($node+".outputS")`;
	for($i=0; $i<size($conn); $i++) {
		select -tgl $conn[$i];
	}
}

/*
a line of adapt ensemble
*/

proc anm_shoAdaptEnsemble(string $name)
{
	string $anm_piecerow = `rowLayout -p anm_existingclm -numberOfColumns 5
    -columnWidth5 50 50 40 40 40
    -adjustableColumn 2
    -columnAlign  1 "right"
    -columnAttach 1 "both"     0
    -columnAttach 2 "both"  0
    -columnAttach 3 "both"  0
    -columnAttach 4 "both"  0
    -columnAttach 5 "both"  0
    -ann $name`;
    
    string $img = "anm_ensembleCtx.xpm";
    if(`getAttr ($name + ".handle")` == "objname") $img = "anm_ensembleObj.xpm";
    
    iconTextButton -ann $anm_piecerow 
    		-style "iconOnly" 
    		-image1 $img
    		-height 36
    		-c ("anm_shopieceinae(\"" + $anm_piecerow + "\")")
    		-dgc anm_dragcallbackPiece;
    		
    		anm_popupGoUpMenu($name);
    		
    string $anm_piecetx = `textField -w 125 -text $name`;
    button -l "attach" -c ("anm_attachEnsemble(\"" + $anm_piecerow + "\")");
    button -l "detach" -c ("anm_detachEnsemble(\"" + $anm_piecerow + "\")");
    button -l "affect" -c ("anm_affectbyEnsemble(\"" + $anm_piecerow + "\")");
    setParent..;
    textField -e -cc ("anm_renameAPiece(\""+$anm_piecerow+"\", \""+$anm_piecetx+"\")") $anm_piecetx;
}

/*
show ensemble line
*/

proc anm_shoEnsemble(string $name)
{
	string $anm_piecerow = `rowLayout -p anm_existingclm -numberOfColumns 5
    -columnWidth5 50 50 40 40 40
    -adjustableColumn 2
    -columnAlign  1 "right"
    -columnAttach 1 "both"     0
    -columnAttach 2 "both"  0
    -columnAttach 3 "both"  0
    -columnAttach 4 "both"  0
    -columnAttach 5 "both"  0
    -ann $name`;
    
    iconTextButton -ann $anm_piecerow 
    		-height 36
    		-style "iconOnly" 
    		-image1 "anm_ensemble.xpm" 
    		-c ("anm_shopieceinae(\"" + $anm_piecerow + "\")")
    		-dgc anm_dragcallbackPiece;
    		
    		anm_popupGoUpMenu($name);
    		
    string $anm_piecetx = `textField -w 125 -text $name`;
    button -l "attach" -c ("anm_attachEnsemble(\"" + $anm_piecerow + "\")");
    button -l "detach" -c ("anm_detachEnsemble(\"" + $anm_piecerow + "\")");
    button -l "affect" -c ("anm_affectbyEnsemble(\"" + $anm_piecerow + "\")");
    setParent..;
    textField -e -cc ("anm_renameAPiece(\""+$anm_piecerow+"\", \""+$anm_piecetx+"\")") $anm_piecetx;
}

/*
show piece line
*/

proc anm_shoPiece(string $name)
{
	string $anm_piecerow = `rowLayout -p anm_existingclm -numberOfColumns 5
    -columnWidth5 50 50 40 40 40
    -adjustableColumn 2
    -columnAlign  1 "right"
    -columnAttach 1 "both"     0
    -columnAttach 2 "both"  0
    -columnAttach 3 "both"  0
    -columnAttach 4 "both"  0
    -columnAttach 5 "both"  0
    -ann $name`;
    
    string $img = "anm_surface.xpm";
    string $node =`rowLayout -q -ann $anm_piecerow`;
    string $diagsh[] = `aShaderDiagnose -n $node -t 1`;
		
    if($diagsh[0]=="color") $img = "anm_color.xpm";
    
    iconTextButton -ann $anm_piecerow 
    		-style "iconOnly" 
    		-height 36
    		-image1 $img 
    		-c ("anm_shopieceinae(\"" + $anm_piecerow + "\")")
    		-dgc anm_dragcallbackPiece;
    		
    		 anm_popupGoUpMenu($name);
    		
    string $anm_piecetx = `textField -w 125 -text $name`;
    //button -l "attach" -c ("anm_attachEnsemble(\"" + $anm_piecerow + "\")");
    //button -l "detach" -c ("anm_detachEnsemble(\"" + $anm_piecerow + "\")");
    
    button -l "affect" -c ("anm_affectbyPiece(\"" + $anm_piecerow + "\")");
    text -l "";
    text -l "";
    setParent..;
    textField -e -cc ("anm_renameAPiece(\""+$anm_piecerow+"\", \""+$anm_piecetx+"\")") $anm_piecetx;
}

/*
add variable line
*/

proc anm_shoVariable(string $name)
{
	string $anm_varrow = `rowLayout -p anm_existingclm -numberOfColumns 5
    -columnWidth5 50 50 40 40 40
    -adjustableColumn 2
    -columnAlign  1 "right"
    -columnAttach 1 "both"     0
    -columnAttach 2 "both"  0
    -columnAttach 3 "both"  0
    -columnAttach 4 "both"  0
    -columnAttach 5 "both"  0
    -ann $name`;
    
    string $img = "anm_variableC.xpm";
    if(`getAttr ($name+".handle")`=="float") $img = "anm_variableF.xpm";
    if(`getAttr ($name+".handle")`=="string") $img = "anm_variableS.xpm";
    
    iconTextButton -ann $anm_varrow 
    		-style "iconOnly" 
    		-height 36
    		-image1 $img
    		-c ("anm_shopieceinae(\"" + $anm_varrow + "\")")
    		-dgc anm_dragcallbackPiece;
    		
    		anm_popupGoUpMenu($name);
    		
    string $anm_vartx = `textField -w 125 -text $name`;
    button -l "affect" -c ("anm_affectbyPiece(\"" + $anm_varrow + "\")");
    text -l "";
    text -l "";
    setParent..;
    textField -e -cc ("anm_renameAPiece(\""+$anm_varrow+"\", \""+$anm_vartx+"\")") $anm_vartx;
}

/*
add adapt variable line
*/

proc anm_shoAdaptVariable(string $name)
{
	string $anm_varrow = `rowLayout -p anm_existingclm -numberOfColumns 5
    -columnWidth5 50 50 40 40 40
    -adjustableColumn 2
    -columnAlign  1 "right"
    -columnAttach 1 "both"     0
    -columnAttach 2 "both"  0
    -columnAttach 3 "both"  0
    -columnAttach 4 "both"  0
    -columnAttach 5 "both"  0
    -ann $name`;
    
    string $img = "anm_variableF.xpm";
    if(`getAttr ($name+".handle")`=="float") {
    	    if(`getAttr ($name+".opt")`=="context") $img = "anm_variableCtxF.xpm";
    	    else if(`getAttr ($name+".opt")`=="objname") $img = "anm_variableObjF.xpm";
    	    else $img = "anm_variableCmbF.xpm";
    }
    else if(`getAttr ($name+".handle")`=="color") {
    	    if(`getAttr ($name+".opt")`=="context") $img = "anm_variableCtxC.xpm";
    	    else if(`getAttr ($name+".opt")`=="objname") $img = "anm_variableObjC.xpm";
    	    else $img = "anm_variableCmbC.xpm";
    }
    else if(`getAttr ($name+".handle")`=="string") {
    	    if(`getAttr ($name+".opt")`=="context") $img = "anm_variableCtxS.xpm";
    	    else if(`getAttr ($name+".opt")`=="objname") $img = "anm_variableObjS.xpm";
    	    else $img = "anm_variableS.xpm";
    }
    
    iconTextButton -ann $anm_varrow 
    		-style "iconOnly"
    		-height 36
    		-image1 $img 
    		-c ("anm_shopieceinae(\"" + $anm_varrow + "\")")
    		-dgc anm_dragcallbackPiece;
    		
    		anm_popupGoUpMenu($name);
    		
    string $anm_vartx = `textField -w 125 -text $name`;
    button -l "affect" -c ("anm_affectbyPiece(\"" + $anm_varrow + "\")");
    text -l "";
    text -l "";
    setParent..;
    textField -e -cc ("anm_renameAPiece(\""+$anm_varrow+"\", \""+$anm_vartx+"\")") $anm_vartx;
}

/*
adapt ensemble add
*/

global proc anm_adaptEnsembleAdd(string $name)
{
	int $n = `getAttr ($name+".numCondition")`;
	setAttr ($name+".numCondition") ($n+1);
	anm_updateAttrib($name);
}

/*
adapt ensemble minus
*/

global proc anm_adaptEnsembleMinus(string $name)
{
	int $n = `getAttr ($name+".numCondition")`;
	if($n > 1) {
// disconnect last line
		$n--;
		string $conn[] =`listConnections -scn on ($name+".ensemble["+ $n +"]")`;
		if(size($conn)>0) {
			disconnectAttr ($conn[0] + ".output") ($name+".ensemble["+ $n +"]");
		}
		setAttr ($name+".numCondition")  $n ;
		anm_updateAttrib($name);
	}
}

/*
list adapt ensemble attrib
*/

proc anm_listAdaptEnsembleAttrib(string $name)
{
	string $theframe = `frameLayout -p anm_curattribclm
		-label $name -labelAlign "bottom"
                -borderStyle "in"
                -collapsable 1`;
        columnLayout;
        	textFieldGrp 
        		-ed off
        		-l "handle"
        		-cw 1 70
        		-cw 2 70
        		-text `getAttr ($name+".handle")`;
        	
        	int $num_line = `getAttr ($name+".numCondition")`;
        	button -l "Create Ensemble" -c ("anm_adaptEnsembleAdd(\""+$name+"\")");
        	button -l "Delete Ensemble" -c ("anm_adaptEnsembleMinus(\""+$name+"\")");
        	int $i;
        	for($i=0; $i<$num_line; $i++) {
        		string $acondition = `getAttr ($name+".condition["+$i+"]")`;
        		string $tfb=`textFieldButtonGrp
        			-cw3 105 175 50
        			-l "Condition"
        			-ann ($name+".condition["+$i+"]")
        			-buttonLabel "Get Select"
        			-text $acondition
        			`;
        		textFieldButtonGrp -e -cc ("anm_connectTextFieldButtonToStringAttr(\""+$tfb+"\")") $tfb;
        		textFieldButtonGrp -e -bc ("anm_setTextFieldButtonTextBySelection(\""+$tfb+"\")") $tfb;
        		
        		string $attrens = $name+".ensemble["+$i+"]";
        		string $tfbens = `textFieldButtonGrp
        			-cw3 75 115 50
        			-l ("Ensemble["+$i+"]")
        			-ann $attrens
        			-buttonLabel "->"
        			//-text `anm_aShaderGetConnected($name+".ensemble["+$i+"]")`
        			-dpc anm_adaptEnsembleConnectDropcallback
        			//-bc ("anm_aShaderNaviConnected( \""+ $name +".ensemble["+$i+"]\")")
        			`;
        			
				textFieldButtonGrp -e -text `anm_aShaderGetConnected($attrens)` $tfbens;
				textFieldButtonGrp -e -bc ("anm_aShaderNaviConnected(\""+ $attrens +"\")") $tfbens;
				popupMenu;
					menuItem -l "Disconnect" -c ("anm_disconnectAttrAny(\""+$tfbens+"\")");
        	}
		setParent..;
	setParent..;
}

/*
adapt variable add
*/

global proc anm_adaptVariableAdd(string $name)
{
	int $n = `getAttr ($name+".numCondition")`;
	setAttr ($name+".numCondition") ($n+1);
	anm_updateAttrib($name);
}

/*
adapt variable minus
*/

global proc anm_adaptVariableMinus(string $name)
{
	int $n = `getAttr ($name+".numCondition")`;
	if($n > 1) {
// disconnect last line
		$n--;
		string $conn[] =`listConnections -p on -scn on ($name+".input["+ $n +"]")`;
		if(size($conn)>0) {
			disconnectAttr $conn[0] ($name+".input["+ $n +"]");
		}
		
		$conn =`listConnections -p on -scn on ($name+".inputC["+ $n +"]")`;
		if(size($conn)>0) {
			disconnectAttr $conn[0] ($name+".inputC["+ $n +"]");
		}
		
		$conn =`listConnections -p on -scn on ($name+".inputS["+ $n +"]")`;
		if(size($conn)>0) {
			disconnectAttr $conn[0] ($name+".inputS["+ $n +"]");
		}
		setAttr ($name+".numCondition")  $n ;
		anm_updateAttrib($name);
	}
}

/*
drop to connect surface
*/

global proc anm_surfaceConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
		
	if(`nodeType $node` == "aShaderPiece") {
		string $diagsh[] = `aShaderDiagnose -n $node -t 1`;
		if($diagsh[0]=="surface") {
			connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
			print("\nconnect "+$node+" to "+$dstnode);
		}
		else print("only surface can be connected");
	}
	else print("only surface can be connected");
}

/*
drop to connect displacement
*/

global proc anm_displacementConnectDropcallback(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)
{
	string $node = `rowLayout -q -ann $msgs[0]`;
// avoid self connection
	string $dstnode = anm_cutByFirstDot(`textFieldButtonGrp -q -ann $dropControl`);
		
	if(`nodeType $node` == "aShaderPiece") {
		string $diagsh[] = `aShaderDiagnose -n $node -t 1`;
		if($diagsh[0]=="displacement") {
			connectAttr -f ($node + ".output") `textFieldButtonGrp -q -ann $dropControl`;
			textFieldButtonGrp -e -text $node $dropControl;
			print("\nconnect "+$node+" to "+$dstnode);
		}
		else print("only displacement can be connected");
	}
	else print("only displacement can be connected");
}

/*
list ensemble attrib
*/

proc anm_listEnsembleAttrib(string $name)
{
	string $theframe = `frameLayout -p anm_curattribclm
		-label $name -labelAlign "bottom"
                -borderStyle "in"
                -collapsable 1`;
        columnLayout;
        	string $attrsurf = $name+".surfaceShader";
		string $tfbsurf = `textFieldButtonGrp
			-ann $attrsurf
			-label "Surface" -ed false 
			-buttonLabel "->"
			-cw3 115 115 50
			//-bc ("anm_aShaderNaviConnected( \""+ $name +".surfaceShader\")")
			//-text `anm_aShaderGetConnected( $name +".surfaceShader")`
			-dpc anm_surfaceConnectDropcallback
			`;
			textFieldButtonGrp -e -text `anm_aShaderGetConnected($attrsurf)` $tfbsurf;
			textFieldButtonGrp -e -bc ("anm_aShaderNaviConnected(\""+ $attrsurf +"\")") $tfbsurf;
			popupMenu;
				menuItem -l "Disconnect" -c ("anm_disconnectAttrAny(\""+$tfbsurf+"\")");
				
		string $attrdisp = $name+".displacementShader";		
		string $tfbdisp = `textFieldButtonGrp
			-ann $attrdisp
			-label "Displacement" -ed false 
			-buttonLabel "->"
			-cw3 115 115 50
			//-bc ("anm_aShaderNaviConnected( \""+ $name +".displacementShader\")")
			//-text `anm_aShaderGetConnected( $name +".displacementShader")`
			-dpc anm_displacementConnectDropcallback
			`;
			textFieldButtonGrp -e -text `anm_aShaderGetConnected($attrdisp)` $tfbdisp;
			textFieldButtonGrp -e -bc ("anm_aShaderNaviConnected(\""+ $attrdisp +"\")") $tfbdisp;
			popupMenu;
				menuItem -l "Disconnect" -c ("anm_disconnectAttrAny(\""+$tfbdisp+"\")");
		setParent..;
	setParent..;
}

/*
list variable attrib
*/

global proc anm_listVariableAttrib(string $name)
{
	string $theframe = `frameLayout -p anm_curattribclm
		-label $name -labelAlign "bottom"
                -borderStyle "in"
                -collapsable 1`;
        columnLayout;
        	string $handle = `getAttr ($name+".handle")`;
        	textFieldGrp 
        		-ed off
        		-l "handle"
        		-cw 1 70
        		-cw 2 70
        		-text $handle;
		if($handle == "float") {
			 attrControlGrp -attribute ($name+".value");
		}
		else if($handle == "color") {
			attrColorSliderGrp -cw 1 80 -at ($name+".value");
		}
		else if($handle == "string") {
			string $scur =`getAttr ($name+".value")`;
			string $txctr = `textFieldButtonGrp -cw 1 50 -cw 2 200 -cw 3 40
						-l "Value" 
						-bl "<...>"
						-text $scur 
						-ann ($name+".value")`;
			textFieldButtonGrp -e -cc ("anm_connectTextFieldButtonToStringAttr(\""+$txctr+"\")") $txctr;
// pick up a file
			textFieldButtonGrp -e -bc ("anm_pickupFileAsStringAttr(\""+$txctr+"\")") $txctr;
		}
        		
		setParent..;
	setParent..;
}

/*
list adapt variable attrib
*/

proc anm_listAdaptVariableAttrib(string $name)
{
	string $theframe = `frameLayout -p anm_curattribclm
		-label $name -labelAlign "bottom"
                -borderStyle "in"
                -collapsable 1`;
        columnLayout;
        	
        	string $operation = `getAttr ($name+".opt")`;
        	string $handle = `getAttr ($name+".handle")`;
        	
        	textFieldGrp 
        		-ed off
        		-l "handle"
        		-cw 1 70
        		-cw 2 70
        		-text $handle;
        		
        	if($operation == "context")
        		textFieldGrp 
        		-ed off
        		-l ""
        		-cw 1 20
        		-cw 2 120
        		-text "switch by context";
        	else if($operation == "objname")
        		textFieldGrp 
        		-ed off
        		-l ""
        		-cw 1 20
        		-cw 2 120
        		-text "switch by objname";
        	else
        		textFieldGrp 
        		-ed off
        		-l ""
        		-cw 1 20
        		-cw 2 120
        		-text "combine";
        	
        	int $unconditional = 0;
        	if($operation != "context" && $operation != "objname") $unconditional = 1;
        	
        	int $num_line = `getAttr ($name+".numCondition")`;
        	button -l "Create Variable" -c ("anm_adaptVariableAdd(\""+$name+"\")");
        	button -l "Delete Variable" -c ("anm_adaptVariableMinus(\""+$name+"\")");
        	int $i;
        	for($i=0; $i<$num_line; $i++) {
        		if($unconditional == 0) {
				string $acondition = `getAttr ($name+".condition["+$i+"]")`;
				string $tfb=`textFieldButtonGrp
					-cw3 75 175 50
					-l "Condition"
					-ann ($name+".condition["+$i+"]")
					-buttonLabel "Get Select"
					-text $acondition
					`;
				textFieldButtonGrp -e -cc ("anm_connectTextFieldButtonToStringAttr(\""+$tfb+"\")") $tfb;
				textFieldButtonGrp -e -bc ("anm_setTextFieldButtonTextBySelection(\""+$tfb+"\")") $tfb;
			}
			
			string $sattr;
			string $tfbattr;
			
			if($handle == "float") {
				
				$sattr = $name+".input["+$i+"]";
				
				$tfbattr = `textFieldButtonGrp
					-cw3 75 115 50
					-l ("Float["+$i+"]")
					-ann $sattr
					-buttonLabel "->"
					//-text `anm_aShaderGetConnected($sattr)`
					-dpc anm_adaptVaribleConnectDropcallback
					//-bc ("anm_aShaderNaviConnected( \""+ $sattr + "\")")
					`;
        		}
        		else if($handle == "color") {
        			
        			$sattr = $name+".inputC["+$i+"]";
        			
				$tfbattr = `textFieldButtonGrp
					-cw3 75 115 50
					-l ("Color["+$i+"]")
					-ann $sattr
					-buttonLabel "->"
					//-text `anm_aShaderGetConnected($sattr)`
					-dpc anm_adaptVaribleConnectDropcallback
					//-bc ("anm_aShaderNaviConnected( \""+ $sattr +"\")")
					`;
        		}
        		else if($handle == "string") {
        			
        			$sattr = $name+".inputS["+$i+"]";
        			
				$tfbattr = `textFieldButtonGrp
					-cw3 75 115 50
					-l ("String["+$i+"]")
					-ann $sattr
					-buttonLabel "->"
					//-text `anm_aShaderGetConnected($sattr)`
					-dpc anm_adaptVaribleConnectDropcallback
					//-bc ("anm_aShaderNaviConnected( \""+ $sattr +"\")")
					`;
        		}
        		
        		textFieldButtonGrp -e -text `anm_aShaderGetConnected($sattr)` $tfbattr;
			textFieldButtonGrp -e -bc ("anm_aShaderNaviConnected(\""+$sattr+"\")") $tfbattr;
			popupMenu;
				menuItem -l "Disconnect" -c ("anm_disconnectAttrAny(\""+$tfbattr+"\")");
        	}
		setParent..;
	setParent..;
}

/*
list piece attrib
*/

proc anm_listPieceAttrib(string $name)
{
	string $theframe = `frameLayout -p anm_curattribclm
		-label $name 
		-labelAlign "bottom"
                -borderStyle "in"
                -collapsable 1`;
			
        columnLayout;
        	string $diagsh[] = `aShaderDiagnose -n $name -nm 1 -t 1`;
        	textFieldGrp -cw 1 50 -cw 2 100 -height 32 -l "name" -text $diagsh[0] -ed off;
        	textFieldGrp -cw 1 50 -cw 2 100 -height 32 -l "type" -text $diagsh[1] -ed off;
        	string $paramsh[] = `aShaderDiagnose -n $name -pl 1`;
        	int $i;
        	for($i=0; $i<size($paramsh); $i = $i+4) {

// create non-exist attrib to node
			if(!`attributeExists $paramsh[$i] $name`) {
				
				if($paramsh[$i+1]=="double3") {
					addAttr -ln $paramsh[$i] -attributeType double3 $name;
					addAttr -ln ($paramsh[$i]+"X") -attributeType double -p $paramsh[$i] $name;
					addAttr -ln ($paramsh[$i]+"Y") -attributeType double -p $paramsh[$i] $name;
					addAttr -ln ($paramsh[$i]+"Z") -attributeType double -p $paramsh[$i] $name;
					string $xyz[] = `anm_splitbyspace($paramsh[$i+2])`;
					string $cmd="setAttr "+$name+"."+$paramsh[$i]+" -type double3 "+$xyz[0]+" "+$xyz[1]+" "+$xyz[2];
					
					eval($cmd);
				}
				else if($paramsh[$i+1]=="double") {
					addAttr -ln $paramsh[$i] -attributeType double $name;
					string $xyz[] = `anm_splitbyspace($paramsh[$i+2])`;
					string $cmd="setAttr "+$name+"."+$paramsh[$i]+" "+$xyz[0];
					
					eval($cmd);
				}
				else {
					addAttr -ln $paramsh[$i] -dt "string" $name;
					setAttr -type "string" ($name+"."+$paramsh[$i]) $paramsh[$i+2];
				}
			}
// parse controls
			if($paramsh[$i+3] == "connection") {
				
				string $sattr = $name+"."+$paramsh[$i];
				
				string $tfbattr = `textFieldButtonGrp
					-ann $sattr
					-label $paramsh[$i] -ed false 
					-buttonLabel "->"
					-cw3 115 115 50
					//-bc ("anm_aShaderNaviConnected( \""+ $sattr +"\")")
					//-text `anm_aShaderGetConnected( $sattr )`
					-dpc anm_pieceConnectDropcallback
					`;
					
				textFieldButtonGrp -e -text `anm_aShaderGetConnected($sattr)` $tfbattr;
				textFieldButtonGrp -e -bc ("anm_aShaderNaviConnected(\""+$sattr+"\")") $tfbattr;
// popup menus
					popupMenu;
						menuItem -l "Disconnect" -c ("anm_disconnectAttrAny(\""+$tfbattr+"\")");
						
			}
			else if($paramsh[$i+3] == "output") {}
			else if($paramsh[$i+3] == "switch") {
				
				string $chkctr;
				if(`getAttr ($name+"."+$paramsh[$i])` == 1.0) $chkctr = `checkBox -l $paramsh[$i] -v on`;
				else $chkctr = `checkBox -l $paramsh[$i] -v off`;
				connectControl $chkctr ($name+"."+$paramsh[$i]);
			}
			else if($paramsh[$i+3] == "slider") {
				string $xyz[] = `anm_splitbyspace($paramsh[$i+2])`;
				string $cmd= "attrFieldSliderGrp -cw 1 80 -min "+$xyz[1]+" -max "+$xyz[2]+" -at "+$name+"."+$paramsh[$i];
				eval($cmd);
			}
			else {
				if($paramsh[$i+1]=="double3") attrColorSliderGrp -cw 1 80 -l $paramsh[$i] -at ($name+"."+$paramsh[$i]);
				else if($paramsh[$i+1]=="double") attrControlGrp -l $paramsh[$i] -attribute ($name+"."+$paramsh[$i]);
				else {
					string $txctr = `textFieldGrp -cw 1 80 -l $paramsh[$i] -text $paramsh[$i+2] -ann $name`;
					textFieldGrp -e -cc ("anm_connectTextFieldToStringAttr(\""+$txctr+"\")") $txctr;
				}
			}
        	}
		setParent..;
	setParent..;
}

/*
create ensemble
*/

global proc anm_createEnsemble(int $type)
{
	string $dummy = `createNode -n "dummy" transform`;
	string $node;
	if($type==0) {
		$node =`createNode -n "ensemble" aShaderEnsemble`;
	}
	else if($type==1) {
		$node =`createNode -n "ctxensemble" aShaderAdaptEnsemble`;
		setAttr -type "string" ($node+".handle") "context";
	}
	else if($type==2) {
		$node =`createNode -n "objensemble" aShaderAdaptEnsemble`;
		setAttr -type "string" ($node+".handle") "objname";
	}
	connectAttr -f ($node + ".output") ($dummy+".translateX");
	anm_updateExisting;
}

/*
create piece
*/

global proc anm_createPiece(string $name)
{
	string $node =`createNode -n $name aShaderPiece`;
	string $rootpath = `anm_getMasterPath`;
	setAttr -type "string" ($node + ".xslPath") ($rootpath+"/"+$name+".xrsl");
	
	string $dummy = `createNode -n "dummy" transform`;
	connectAttr -f ($node + ".output") ($dummy+".translateX");
	anm_updateExisting;
}

/*
create variable
*/

global proc anm_createVariable(int $handle)
{
	string $dummy = `createNode -n "dummy" transform`;
	string $node;
	if($handle==0) {
		$node =`createNode -n "fvariable" aShaderVariable`;
		setAttr -type "string" ($node+".handle") "float";
		addAttr -ln "value" -attributeType double $node;
		setAttr ($node +".value") 1.0;
	}
	else if($handle==1) {
		$node =`createNode -n "cvariable" aShaderVariable`;
		setAttr -type "string" ($node+".handle") "color";
		addAttr -ln "value" -attributeType double3 $node;
		addAttr -ln ("valueX") -attributeType double -p "value" $node;
		addAttr -ln ("valueY") -attributeType double -p "value" $node;
		addAttr -ln ("valueZ") -attributeType double -p "value" $node;
		setAttr ($node+".value") -type double3 1.0 1.0 1.0;
	}
	else if($handle==2) {
		$node =`createNode -n "svariable" aShaderVariable`;
		setAttr -type "string" ($node+".handle") "string";
		addAttr -ln "value" -dt "string" $node;
	}
	else if($handle==3) {
		string $node =`createNode -n "cvarbyctx" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "color";
		setAttr -type "string" ($node+".opt") "context";
	}
	else if($handle==4) {
		string $node =`createNode -n "cvarbyobj" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "color";
		setAttr -type "string" ($node+".opt") "objname";
	}
	else if($handle==5) {
		$node =`createNode -n "fvarbyctx" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "float";
		setAttr -type "string" ($node+".opt") "context";
	}
	else if($handle==6) {
		$node =`createNode -n "fvarbyobj" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "float";
		setAttr -type "string" ($node+".opt") "objname";
	}
	else if($handle==7) {
		$node =`createNode -n "svarbyctx" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "string";
		setAttr -type "string" ($node+".opt") "context";
	}
	else if($handle==8) {
		$node =`createNode -n "svarbyobj" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "string";
		setAttr -type "string" ($node+".opt") "objname";
	}
	else if($handle==9) {
		$node =`createNode -n "cmbcvar" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "color";
		setAttr -type "string" ($node+".opt") "combine";
	}
	else if($handle==10) {
		$node =`createNode -n "cmbfvar" aShaderAdaptVariable`;
		setAttr -type "string" ($node+".handle") "float";
		setAttr -type "string" ($node+".opt") "combine";
	}
	connectAttr -f ($node + ".output") ($dummy+".translateX");
	anm_updateExisting;
}

/*
update existing piece list
*/

global proc anm_updateExisting()
{
	string $node[] =`columnLayout -q -childArray anm_existingclm`;
	string $an;
	for($an in $node) {
		deleteUI $an;
	}
// get filter option
	int $flt = 1;
	global string $ANM_ShoFilterMenu;
	if($ANM_ShoFilterMenu != "") $flt = `optionMenu -q -sl $ANM_ShoFilterMenu`;
// find pieces
	
	if($flt == 1) {	
		text -p anm_existingclm -l "Existing Items";
	$node = `ls -type aShaderAdaptEnsemble`;
	
	for($an in $node) {
		
		 anm_shoAdaptEnsemble($an);
	}
	
	$node = `ls -type aShaderEnsemble`;
	
	for($an in $node) {
		
		 anm_shoEnsemble($an);
	}
	
	$node = `ls -type aShaderPiece`;
	
	for($an in $node) {
		
		 anm_shoPiece($an);
	}
	
	$node = `ls -type aShaderVariable`;
	
	for($an in $node) {
		
		 anm_shoVariable($an);
	}
	
	$node = `ls -type aShaderAdaptVariable`;
	
	for($an in $node) {
		
		 anm_shoAdaptVariable($an);
	}
	}
	else if($flt == 2) {
		text -p anm_existingclm -l "Existing Ensemble";
		$node = `ls -type aShaderAdaptEnsemble`;
	
		for($an in $node) anm_shoAdaptEnsemble($an);

		$node = `ls -type aShaderEnsemble`;
	
		for($an in $node) anm_shoEnsemble($an);
	}
	else if($flt == 3) {
		text -p anm_existingclm -l "Existing Surface";
		$node = `ls -type aShaderPiece`;
	
		for($an in $node) {
			string $diagsh[] = `aShaderDiagnose -n $an -t 1`;
			if($diagsh[0] == "surface") anm_shoPiece($an);
		}
	}
	else if($flt == 4) {
		text -p anm_existingclm -l "Existing Displacement";
		$node = `ls -type aShaderPiece`;
	
		for($an in $node) {
			string $diagsh[] = `aShaderDiagnose -n $an -t 1`;
			if($diagsh[0] == "displacement") anm_shoPiece($an);
		}
	}
	else if($flt == 5) {
		text -p anm_existingclm -l "Existing Color";
		$node = `ls -type aShaderPiece`;
	
		for($an in $node) {
			string $diagsh[] = `aShaderDiagnose -n $an -t 1`;
			if($diagsh[0] == "color") anm_shoPiece($an);
		}
		
		$node = `ls -type aShaderVariable`;
	
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "color") anm_shoVariable($an);
		}
		
		$node = `ls -type aShaderAdaptVariable`;
		
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "color") anm_shoAdaptVariable($an);
		}
	}
	else if($flt == 6) {
		text -p anm_existingclm -l "Existing Float";
		$node = `ls -type aShaderPiece`;
	
		for($an in $node) {
			string $diagsh[] = `aShaderDiagnose -n $an -t 1`;
			if($diagsh[0] == "float") anm_shoPiece($an);
		}
		
		$node = `ls -type aShaderVariable`;
	
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "float") anm_shoVariable($an);
		}
		
		$node = `ls -type aShaderAdaptVariable`;
		
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "float") anm_shoAdaptVariable($an);
		}
	}
	else if($flt == 7) {
		text -p anm_existingclm -l "Existing String";
		$node = `ls -type aShaderPiece`;
	
		for($an in $node) {
			string $diagsh[] = `aShaderDiagnose -n $an -t 1`;
			if($diagsh[0] == "string") anm_shoPiece($an);
		}
		
		$node = `ls -type aShaderVariable`;
	
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "string") anm_shoVariable($an);
		}
		
		$node = `ls -type aShaderAdaptVariable`;
		
		for($an in $node) {
			if(`getAttr ($an+".handle")` == "string") anm_shoAdaptVariable($an);
		}
	}
}

/*
update attr list
*/

global proc anm_updateAttrib(string $name)
{
// cleanup
	string $node[] =`columnLayout -q -childArray anm_curattribclm`;
	string $an;
	for($an in $node) {
		deleteUI $an;
	}

	if(`nodeType $name` == "aShaderAdaptEnsemble") anm_listAdaptEnsembleAttrib($name);
	else if(`nodeType $name` == "aShaderEnsemble") anm_listEnsembleAttrib($name);
	else if(`nodeType $name` == "aShaderPiece") anm_listPieceAttrib($name);
	else if(`nodeType $name` == "aShaderVariable") anm_listVariableAttrib($name);
	else if(`nodeType $name` == "aShaderAdaptVariable") anm_listAdaptVariableAttrib($name);

// history of select	
	global int $ANM_NUMItem;
	global int $ANM_CURItem;
	global string $ANM_PreservedItems[];
	
	if($ANM_NUMItem < 16) {	
		$ANM_PreservedItems[$ANM_NUMItem] = $name;
		$ANM_CURItem = $ANM_NUMItem;
		$ANM_NUMItem++;
	}
	else {
		int $i;
		for($i=0; $i<16; $i++) {
			$ANM_PreservedItems[$i] = $ANM_PreservedItems[$i+1];
		}
		$ANM_PreservedItems[16] = $name;
		$ANM_CURItem = 16;
	}
}

/*
update attr by hisory
*/

global proc anm_updateHistoryAttrib(int $offset)
{
	global int $ANM_NUMItem;
	global int $ANM_CURItem;
	global string $ANM_PreservedItems[];
	int $oldcur = $ANM_CURItem;
	$ANM_CURItem += $offset;
	if($ANM_CURItem <0) $ANM_CURItem =0;
	else if($ANM_CURItem >16) $ANM_CURItem = 16;
	if($ANM_CURItem == $oldcur) return;
	
	string $name = $ANM_PreservedItems[$ANM_CURItem];
	if($name == "") return;

// cleanup
	string $node[] =`columnLayout -q -childArray anm_curattribclm`;
	string $an;
	for($an in $node) deleteUI $an;
	
	if(`nodeType $name` == "aShaderAdaptEnsemble") anm_listAdaptEnsembleAttrib($name);
	else if(`nodeType $name` == "aShaderEnsemble") anm_listEnsembleAttrib($name);
	else if(`nodeType $name` == "aShaderPiece") anm_listPieceAttrib($name);
	else if(`nodeType $name` == "aShaderVariable") anm_listVariableAttrib($name);
	else if(`nodeType $name` == "aShaderAdaptVariable") anm_listAdaptVariableAttrib($name);
}

/*
main window
*/

global proc anm_openAShaderManWin() 
{
//create shader path
	string $shader_path = `workspace -q -fn`+"/rmanshaders/";
	
	system("mkdir "+$shader_path);

//If such a window already exists, destory it.
 if ( (`window -exists anm_AShaderManWin`) == true ) deleteUI anm_AShaderManWin;
 
//Create the window.
 window -title "anemone 4.1 - Shader Management" -wh 400 300  -mb false anm_AShaderManWin;

//Layout
string $form = `formLayout -numberOfDivisions 100`;
string $row = `rowColumnLayout -numberOfColumns 5 
			-columnWidth 1 120 
			-columnWidth 2 160 
			-columnWidth 3 160 
			-columnWidth 4 80
			-columnWidth 5 80  
			//-columnAttach 1 "both" 0 -columnAttach 2 "both" 0 -columnAttach 3 "both" 0
			`;
    
//columnLayout -adjustableColumn true;

//column begin
     string $panel = `paneLayout -configuration "vertical3" -p $form`;

    scrollLayout;
    columnLayout -adjustableColumn true;
     frameLayout -label "Ensemble" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
        columnLayout;
        
        iconTextButton -width 150 -style "iconAndTextHorizontal" 
        	-image1 "anm_ensemble.xpm"
        	-height 36
        	-l "Simple" 
        	-c "anm_createEnsemble(0)";
        iconTextButton -width 150  -style "iconAndTextHorizontal" 
        	-image1 "anm_ensembleCtx.xpm" 
        	-height 36
        	-l "AdaptByContext"  
        	-c "anm_createEnsemble(1)";
        iconTextButton -width 150  -style "iconAndTextHorizontal" 
        	-image1 "anm_ensembleObj.xpm"
        	-height 36
        	-l "AdaptByObject"  
        	-c "anm_createEnsemble(2)";
        
        	setParent..;
        setParent..;
        
        frameLayout -label "Surface" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
                string $surfs[] = `anm_getSurfaceFiles`;
                string $asurf;
                
                
        columnLayout;
        
		for($asurf in $surfs) {
			iconTextButton -width 100 -height 36
				-style "iconAndTextHorizontal" 
				-image1 "anm_surface.xpm" 
				-l $asurf 
				-c ("anm_createPiece(\""+$asurf+"\")");
		}
        	setParent..;
        setParent..;
        
        frameLayout -label "Displacement" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
        columnLayout;
        
        
        	setParent..;
        setParent..;
        
        frameLayout -label "Color" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
        columnLayout;
        
        	string $colrs[] = `anm_getColorFiles`;
                string $acolr;
                for($acolr in $colrs) {
			iconTextButton -width 100 -height 36
				-style "iconAndTextHorizontal" 
				-image1 "anm_color.xpm" 
				-l $acolr 
				-c ("anm_createPiece(\""+$acolr+"\")");
		}
        
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableC.xpm" 
        		-l "Variable"
        		-c "anm_createVariable(1)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableCtxC.xpm" 
        		-height 36 
        		-l "byContext"
        		-c "anm_createVariable(3)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableObjC.xpm" 
        		-height 36
        		-l "byObjname"
        		-c "anm_createVariable(4)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableCmbC.xpm" 
        		-height 36 
        		-l "Combine"
        		-c "anm_createVariable(9)";
        
        	setParent..;
        setParent..;
        
        frameLayout -label "Float" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
        columnLayout;
        
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableF.xpm" 
        		-height 36
        		-l "Variable"
        		-c "anm_createVariable(0)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableCtxF.xpm" 
        		-height 36
        		-l "byContext"
        		-c "anm_createVariable(5)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableObjF.xpm" 
        		-height 36 
        		-l "byObjname"
        		-c "anm_createVariable(6)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableCmbF.xpm" 
        		-height 36
        		-l "Combine"
        		-c "anm_createVariable(10)";
        
        	setParent..;
        setParent..;
        
        frameLayout -label "String" -labelAlign "center"
                -borderStyle "in" -collapsable 1 ;
                
        columnLayout;
        
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableS.xpm" 
        		-height 36 
        		-l "Variable"
        		-c "anm_createVariable(2)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableCtxS.xpm" 
        		-height 36
        		-l "byContext"
        		-c "anm_createVariable(7)";
        		
        	iconTextButton -width 100  -style "iconAndTextHorizontal" 
        		-image1 "anm_variableObjS.xpm" 
        		-height 36
        		-l "byObjname"
        		-c "anm_createVariable(8)";
        
        	setParent..;
        setParent..;
    setParent..;
    
   
    setParent..;

    scrollLayout;
        columnLayout anm_existingclm;
        text -l "Existing";
        anm_updateExisting();
        setParent..;
    setParent..;    
	scrollLayout;
        columnLayout anm_curattribclm;
        	setParent..;
    setParent..;
	
//row begin
//button -l "Reload" -c "anm_openAShaderManWin"-p $row;
//button -l "Apply" -c "doImportanemone" -p $row;
//button -l "Close" -c "deleteUI anm_AShaderManWin" -p $row;
	global int $ANM_NUMItem;
	$ANM_NUMItem = 0;
	
	iconTextButton -height 36
		-c "global string $ANM_ShoFilterMenu; $ANM_ShoFilterMenu = \"\";anm_openAShaderManWin"
		-p $row -style "iconOnly" -image1 "anm_reload.xpm";
	
	global string $ANM_ShoFilterMenu;
	$ANM_ShoFilterMenu = `optionMenu 
		-p $row 
		-label " " //-columnWidth 1 40 -columnWidth 2 120 
		-cc anm_updateExisting`;// anm_shofilteroptmenu;

				menuItem -l "All";
				menuItem -l "Ensemble";
				menuItem -l "Surface";
				menuItem -l "Displacement";
				menuItem -l "Color";
				menuItem -l "Float";
				menuItem -l "String";
				menuItem -l "Selected";
	setParent..; 		
iconTextButton -dpc anm_dropcallbackPiece  -height 36
	-c anm_updateExisting
	-p $row -style "iconOnly" -image1 "anm_trashBin.xpm";
	
	iconTextButton -height 36
	-c "anm_updateHistoryAttrib(-1)"
	-p $row -style "iconOnly" -image1 "anm_backward.xpm";
	
	iconTextButton -height 36
	-c "anm_updateHistoryAttrib(1)"
	-p $row -style "iconOnly" -image1 "anm_forward.xpm";


formLayout -edit
        -attachNone  $row     "top"
        -attachForm     $row     "left"   2
        -attachForm	$row     "bottom" 2
        -attachForm 	$row     "right"  2

        -attachForm     $panel "top"    2
        -attachForm	$panel "left"   2
        -attachControl	$panel "bottom" 2 $row
        -attachForm     $panel "right"  2
    $form;

showWindow anm_AShaderManWin;
}
